<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 开启包自动扫描 -->
	<context:component-scan base-package="com.stee.emer"/>
	
	<bean class="com.stee.dsms.properties.PropertyConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="remotes">
			<list>
				<value>
					http://192.168.0.98:10005/CCS_CM/jdbc.properties
				</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${DB.url}" />
	    <property name="username" value="${DB.username}" />
	    <property name="password" value="${DB.password}" />
	    
	    <property name="filters" value="stat" />
	    
	    <property name="maxActive" value="20" />
	    <property name="initialSize" value="1" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    
	    <property name="testWhileIdle" value="false" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxOpenPreparedStatements" value="20" />
 	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>
		<property name="typeAliasesPackage" value="com.stee.emer.entity"></property>
	</bean>
	 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.stee.emer.mapper" />
	</bean>
	
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- spring declarative transaction management -->
	<aop:config>
		<aop:pointcut id="fooServiceMethods"
			expression="execution(* com.stee.emer.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 定时推送等级1、2的未完成的事件 -->
	<bean id="Job" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.stee.emer.quartz.TopicSenderTimer"></bean>
		</property>
		<property name="targetMethod" value="init" />
		<property name="concurrent" value="false" />
	</bean>
	
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">  
		<property name="jobDetail" ref="Job" />  
		<property name="startDelay" value="0" />
		<property name="repeatInterval" value="5000" />
	</bean> 
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
		<property name="triggers">  
			<list>  
				<ref bean="simpleTrigger" />
			</list>  
		</property>  
	</bean>  
</beans>
